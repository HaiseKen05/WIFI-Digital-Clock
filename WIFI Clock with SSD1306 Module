#include <Wire.h>
#include <WiFi.h>
#include "time.h"
#include "esp_sntp.h"
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128  // OLED display width, in pixels
#define SCREEN_HEIGHT 32  // OLED display height, in pixels
#define OLED_RESET    -1  // Reset pin (not needed for I2C)
#define SCREEN_ADDRESS 0x3C  // I2C address for SSD1306

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Wi-Fi Credentials
const char *ssid = "ESP32-AP";      // Enter your WiFi SSID
const char *password = "ESP32-Connect";  // Enter your WiFi Password

// NTP Server Configuration
const char *ntpServer1 = "pool.ntp.org";
const char *ntpServer2 = "time.nist.gov";
const long gmtOffset_sec = 3600 * 8;       // Adjust according to your timezone
const int daylightOffset_sec = 0;   // Daylight savings offset in seconds

// Location Information
const char *location = "Cebu, Philippines";   // Enter your location


// Buffers to store last displayed date and time
char lastDisplayedDate[20] = " ";
char lastDisplayedTime[20] = " ";

// Function to print local time on OLED
void printLocalTime() {
    struct tm timeinfo;
    
    if (!getLocalTime(&timeinfo)) {
        Serial.println("Failed to obtain time!");
        return;
    }

    // Prepare date and time strings
    char currentDate[20];
    char currentTime[20];
    strftime(currentDate, sizeof(currentDate), "%b %d, %Y", &timeinfo); // e.g., Apr 02, 2025
    strftime(currentTime, sizeof(currentTime), "%H:%M:%S", &timeinfo); // e.g., 12:34:56

    // Update OLED display
    display.clearDisplay();
    display.setTextSize(1);  // Adjust text size for readability
    display.setTextColor(SSD1306_WHITE);

    display.setCursor(0, 0);
    display.print(currentDate);

    display.setCursor(0, 10);
    display.print(currentTime);

    display.setCursor(0, 20);
    display.print(location);

    display.display();
}

// Callback function for NTP synchronization
void timeSyncCallback(struct timeval *t) {
    Serial.println("NTP Time Synchronized!");
    printLocalTime();
}

// Wi-Fi Connection Setup
void connectToWiFi() {
    Serial.printf("Connecting to Wi-Fi: %s ", ssid);
    WiFi.begin(ssid, password);

    // Wait until connected
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.print(".");
    }

    Serial.println("\nWi-Fi Connected!");
}

// Setup Function
void setup() {
    Serial.begin(115200);
    
    // Initialize OLED
    if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
        Serial.println(F("SSD1306 allocation failed"));
        for (;;);
    }

    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(10, 10);
    display.print("Connecting Wi-Fi...");
    display.display();

    // Connect to Wi-Fi
    connectToWiFi();

    // Configure NTP and Time Synchronization
    esp_sntp_servermode_dhcp(1);
    sntp_set_time_sync_notification_cb(timeSyncCallback);
    configTime(gmtOffset_sec, daylightOffset_sec, ntpServer1, ntpServer2);

    display.clearDisplay();
    display.setCursor(10, 10);
    display.print("Wi-Fi Connected!");
    display.display();
}

// Loop Function
void loop() {
    delay(1000);  // Update time every second
    printLocalTime();
}
